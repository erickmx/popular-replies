{"version":3,"sources":["components/list_item/ListItem.js","components/list_replies/ListReplies.js","utils/api.js","utils/treeUtils.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","_ref","me2","url","wid","text","onClick","replies","maxValue","rootIndex","_ref$subIndent","subIndent","react_default","a","createElement","className","style","marginLeft","concat","key","index_es","icon","faUser","href","faExternalLinkAlt","display","flexDirection","flex","marginBottom","faReply","faBullhorn","color","faHeart","defaultProps","ListReplies","_this$props","this","props","indent","handleClickReplies","map","reply","Fragment","components_list_item_ListItem","data","sons","length","Component","BASE_URL","fetchPopular","Object","asyncToGenerator","regenerator_default","mark","_callee","params","response","_args","arguments","wrap","_context","prev","next","undefined","from","limit","fetch","method","crossDomain","mode","cache","sent","ok","Error","json","abrupt","t0","console","error","stop","apply","fetchReplies","_ref2","_callee2","_args2","_context2","mapData","isLeaf","node","findMaxSum","arrLenght","max","sum","idx","Math","setMaxValue","findNode","action","App","state","listPopulars","handleClickPopulars","result","_this","setState","_callee3","_context3","findNodeAsync","then","_ref3","finded","insertReplies","_x4","Promise","resolve","reject","_callee4","_context4","handleClick","_this2","popular","catch","err","_this3","fontSize","whisper","list_replies_ListReplies","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c01dd11.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faExternalLinkAlt,\n  faBullhorn,\n  faReply,\n  faHeart,\n  faUser\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { string, number, func } from \"prop-types\";\nimport \"./ListItem.css\";\n\nconst ListItem = ({\n  me2,\n  url,\n  wid,\n  text,\n  onClick,\n  replies,\n  maxValue,\n  rootIndex,\n  subIndent = 0\n}) => (\n  <li\n    className=\"list-item__container\"\n    style={{\n      marginLeft: `${10 * subIndent}px`\n    }}\n    key={wid}\n    onClick={() => onClick(rootIndex, wid)}\n  >\n    <div className=\"list-item__user\">\n      <FontAwesomeIcon icon={faUser} /> {me2}\n    </div>\n    <div className=\"list-item__text\">\n      {text}{\" \"}\n      <a href={url}>\n        <FontAwesomeIcon icon={faExternalLinkAlt} />\n      </a>\n    </div>\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"row\",\n        flex: 1,\n        marginLeft: \"5px\",\n        marginBottom: \"5px\"\n      }}\n    >\n      <div className=\"padding-5\">\n        <FontAwesomeIcon icon={faReply} />\n        {replies}\n      </div>\n      {wid && (\n        <div className=\"padding-5\" style={{ marginLeft: \"10px\" }}>\n          <FontAwesomeIcon icon={faBullhorn} /> {wid}\n        </div>\n      )}\n      <div className=\"padding-5\">\n        <FontAwesomeIcon\n          style={{ color: \"#d30000\", marginLeft: \"10px\" }}\n          icon={faHeart}\n        />{\" \"}\n        {maxValue}\n      </div>\n    </div>\n  </li>\n);\n\nListItem.propTypes = {\n  onClick: func.isRequired,\n  text: string.isRequired,\n  me2: number.isRequired,\n  url: string.isRequired,\n  subIndent: number,\n  rootIndex: number,\n  maxValue: number,\n  replies: number,\n  wid: string\n};\n\nListItem.defaultProps = {\n  rootIndex: null,\n  subIndent: 0,\n  maxValue: 0,\n  replies: 0,\n  wid: null\n};\n\nexport default ListItem;\n","import React, { Component } from \"react\";\nimport { shape, arrayOf, number, func, string, array } from \"prop-types\";\nimport ListItem from \"../list_item/ListItem\";\n\nclass ListReplies extends Component {\n  render() {\n    const { replies, indent, rootIndex, handleClickReplies } = this.props;\n    return (\n      <div>\n        {replies.map(reply => {\n          return (\n            <>\n              <ListItem\n                key={reply.data.wid}\n                me2={reply.data.me2}\n                text={reply.data.text}\n                replies={reply.data.replies}\n                url={reply.data.url}\n                wid={reply.data.wid}\n                rootIndex={rootIndex}\n                onClick={handleClickReplies}\n                subIndent={indent}\n                maxValue={reply.maxValue || reply.data.replies}\n              />\n              {reply.sons.length > 0 && (\n                <ListReplies\n                  indent={indent + 1}\n                  replies={reply.sons}\n                  rootIndex={rootIndex}\n                  handleClickReplies={handleClickReplies}\n                />\n              )}\n            </>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nListReplies.propTypes = {\n  replies: arrayOf(\n    shape({\n      data: shape({\n        replies: number.isRequired,\n        text: string.isRequired,\n        me2: number.isRequired,\n        url: string.isRequired,\n        wid: string.isRequired\n      }),\n      sons: array,\n      maxValue: number\n    })\n  ).isRequired,\n  indent: number.isRequired,\n  rootIndex: number.isRequired,\n  handleClickReplies: func.isRequired\n};\n\nexport default ListReplies;\n","const BASE_URL =\n  \"https://3p8v5rmr93.execute-api.us-west-2.amazonaws.com/default/popular-replies\";\n\nexport const fetchPopular = async (params = { from: 0, limit: 200 }) => {\n  try {\n    const response = await fetch(`${BASE_URL}?limit=${params.limit}`, {\n      method: \"GET\",\n      crossDomain: true,\n      mode: \"cors\",\n      cache: \"no-cache\"\n    });\n    if (!response.ok) {\n      throw new Error(\"Error requesting popular whispers from the server\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const fetchReplies = async (\n  params = { wid: \"\", from: 0, limit: 200 }\n) => {\n  try {\n    const response = await fetch(\n      `${BASE_URL}?limit=${params.limit}&wid=${params.wid}`,\n      {\n        method: \"GET\",\n        crossDomain: true,\n        mode: \"cors\",\n        cache: \"no-cache\"\n      }\n    );\n    if (!response.ok) {\n      throw new Error(\"Error requesting whisper's replies from the server\");\n    }\n    const data = await response.json();\n    return data;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const mapData = data => {\n  return {\n    data: {\n      me2: data.me2,\n      replies: data.replies,\n      text: data.text,\n      url: data.url,\n      wid: data.wid\n    },\n    maxValue: 0,\n    sons: []\n  };\n};\n","/**\n * @param {{\n * data: { me2: number, replies: number, text: string, url: string, wid: string },\n * maxValue: number,\n * sons: Array | null\n * }} node\n */\nexport const isLeaf = node => {\n  return node.sons.length === 0;\n};\n\n/**\n *\n * @param {Array<{\n * data: { me2: number, replies: number, text: string, url: string, wid: string },\n * maxValue: number,\n * sons: Array | null\n * }>} leafs\n */\nexport const getMaxValue = leafs => {\n  return leafs.reduce((max, curr) => Math.max(max, curr.data.replies), 0);\n};\n\n/**\n *\n * @param {{\n * data: { me2: number, replies: number, text: string, url: string, wid: string },\n * maxValue: number,\n * sons: Array\n * }} node\n */\nexport const findMaxSum = node => {\n  if (isLeaf(node)) {\n    return node.data.replies;\n  }\n\n  const arrLenght = node.sons.length;\n  let max = 0;\n  let sum = 0;\n  for (let idx = 0; idx < arrLenght; idx++) {\n    max = findMaxSum(node.sons[idx]);\n    sum = Math.max(sum, max + node.data.replies);\n  }\n\n  setMaxValue(node, sum);\n  return sum;\n};\n\nexport const findNode = (node, wid, action) => {\n  if (isLeaf(node) && node.data.wid !== wid) {\n    return null;\n  }\n\n  if (node.data.wid === wid) {\n    action(node);\n    return node;\n  }\n\n  const arrLenght = node.sons.length;\n  for (let idx = 0; idx < arrLenght; idx++) {\n    const finded = findNode(node.sons[idx], wid, action);\n    if (finded) {\n      break;\n    }\n  }\n};\n\n/**\n *\n * @param {{\n * data: { me2: number, replies: number, text: string, url: string, wid: string },\n * maxValue: number,\n * sons: Array\n * }} node\n */\nexport const setMaxValue = (node, maxValue) => {\n  node.maxValue = maxValue;\n};\n\n/*\nconst mockData = {\n  data: { me2: 1, replies: 10, text: \"Algo\", url: \"URL\", wid: \"idRaro\" },\n  maxValue: 0,\n  sons: [\n    {\n      data: { me2: 2.1, replies: 2, text: \"Algo\", url: \"URL\", wid: \"idRaro\" },\n      maxValue: 0,\n      sons: [\n        {\n          data: {\n            me2: 3.11,\n            replies: 12,\n            text: \"Algo\",\n            url: \"URL\",\n            wid: \"idRaro\"\n          },\n          maxValue: 0,\n          sons: [\n            {\n              data: {\n                me2: 411,\n                replies: 0,\n                text: \"Algo\",\n                url: \"URL\",\n                wid: \"idRaro\"\n              },\n              maxValue: 0,\n              sons: []\n            },\n            {\n              data: {\n                me2: 412,\n                replies: 12,\n                text: \"Algo\",\n                url: \"URL\",\n                wid: \"idRaro\"\n              },\n              maxValue: 0,\n              sons: []\n            }\n          ]\n        }\n      ]\n    },\n    {\n      data: { me2: 22, replies: 8, text: \"Algo\", url: \"URL\", wid: \"idRaro\" },\n      maxValue: 0,\n      sons: [\n        {\n          data: {\n            me2: 321,\n            replies: 10,\n            text: \"Algo\",\n            url: \"URL\",\n            wid: \"idRaro\"\n          },\n          maxValue: 0,\n          sons: []\n        },\n        {\n          data: {\n            me2: 322,\n            replies: 7,\n            text: \"Algo\",\n            url: \"URL\",\n            wid: \"idRaro\"\n          },\n          maxValue: 0,\n          sons: [\n            {\n              data: {\n                me2: 421,\n                replies: 0,\n                text: \"Algo\",\n                url: \"URL\",\n                wid: \"idRaro\"\n              },\n              maxValue: 0,\n              sons: [\n                {\n                  data: {\n                    me2: 521,\n                    replies: 0,\n                    text: \"Algo\",\n                    url: \"URL\",\n                    wid: \"idRaro\"\n                  },\n                  maxValue: 0,\n                  sons: []\n                },\n                {\n                  data: {\n                    me2: 522,\n                    replies: 3,\n                    text: \"Algo\",\n                    url: \"URL\",\n                    wid: \"idRaro\"\n                  },\n                  maxValue: 0,\n                  sons: [\n                    {\n                      data: {\n                        me2: 621,\n                        replies: 0,\n                        text: \"Algo\",\n                        url: \"URL\",\n                        wid: \"idRaro\"\n                      },\n                      maxValue: 0,\n                      sons: []\n                    }\n                  ]\n                }\n              ]\n            },\n            {\n              data: {\n                me2: 422,\n                replies: 10,\n                text: \"Algo\",\n                url: \"URL\",\n                wid: \"idRaro\"\n              },\n              maxValue: 2,\n              sons: []\n            }\n          ]\n        }\n      ]\n    },\n    {\n      data: { me2: 23, replies: 10, text: \"Algo\", url: \"URL\", wid: \"idRaro\" },\n      maxValue: 0,\n      sons: []\n    },\n    {\n      data: { me2: 24, replies: 0, text: \"Algo\", url: \"URL\", wid: \"idRaro\" },\n      maxValue: 0,\n      sons: [\n        {\n          data: {\n            me2: 341,\n            replies: 52,\n            text: \"Algo\",\n            url: \"URL\",\n            wid: \"idRaro\"\n          },\n          maxValue: 0,\n          sons: [\n            {\n              data: {\n                me2: 441,\n                replies: 10,\n                text: \"Algo\",\n                url: \"URL\",\n                wid: \"idRaro\"\n              },\n              maxValue: 0,\n              sons: []\n            },\n            {\n              data: {\n                me2: 442,\n                replies: 0,\n                text: \"Algo\",\n                url: \"URL\",\n                wid: \"idRaro\"\n              },\n              maxValue: 0,\n              sons: [\n                {\n                  data: {\n                    me2: 541,\n                    replies: 2,\n                    text: \"Algo\",\n                    url: \"URL\",\n                    wid: \"wid400000\"\n                  },\n                  maxValue: 0,\n                  sons: []\n                }\n              ]\n            }\n          ]\n        },\n        {\n          data: {\n            me2: 342,\n            replies: 0,\n            text: \"Algo\",\n            url: \"URL\",\n            wid: \"idRaro\"\n          },\n          maxValue: 0,\n          sons: []\n        }\n      ]\n    }\n  ]\n};\n\nconsole.log(\"====================================\");\nconsole.log(findMaxSum(mockData));\nconsole.log(\"====================================\");\nconsole.log(\"====================================\");\nconsole.log(\n  findNode(mockData, \"wid400000\", node => {\n    node.data.text = \"Me Encontraron\";\n    console.log(\"FINDED\", node);\n  })\n);\nconsole.log(\"====================================\");\nconsole.log(\"====================================\");\nconsole.log(\n  findNode(mockData, \"wid400000\", node => {\n    console.log(\"FINDED_2\", node);\n  })\n);\nconsole.log(\"====================================\");\nconsole.log(\"====================================\");\nconsole.log(mockData);\nconsole.log(\"====================================\");\n*/\n","import React, { Component } from \"react\";\nimport ListReplies from \"./components/list_replies/ListReplies\";\nimport { fetchPopular, mapData, fetchReplies } from \"./utils/api\";\nimport ListItem from \"./components/list_item/ListItem\";\nimport { findNode, isLeaf, findMaxSum } from \"./utils/treeUtils\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    listPopulars: []\n  };\n\n  componentDidMount() {\n    fetchPopular({ limit: 10 })\n      .then(result => {\n        const listPopulars = result.popular.map(mapData);\n        this.setState({ listPopulars });\n      })\n      .catch(err => {\n        console.error(\"COMPONENT_DID_MOUNT_APP\", err);\n      });\n  }\n\n  handleClickPopulars = async rootIndex => {\n    try {\n      const { listPopulars } = this.state;\n      let sons;\n      if (isLeaf(listPopulars[rootIndex])) {\n        const result = await fetchReplies({\n          limit: 10,\n          wid: listPopulars[rootIndex].data.wid\n        });\n        sons = result.replies.map(mapData);\n      }\n      listPopulars[rootIndex].sons = sons;\n      findMaxSum(listPopulars[rootIndex]);\n      this.setState({ listPopulars });\n    } catch (error) {\n      console.error(\"HANDLE_CLICK_APP\", error);\n    }\n  };\n\n  handleClickReplies = async (rootIndex, wid) => {\n    try {\n      const { listPopulars } = this.state;\n      const node = listPopulars[rootIndex];\n      this.findNodeAsync(node, wid).then(async finded => {\n        await this.insertReplies(finded);\n        findMaxSum(node);\n        this.setState({ listPopulars });\n      });\n    } catch (error) {\n      console.error(\"HANDLE_CLICK_REPLIES\", error);\n    }\n  };\n\n  findNodeAsync = (node, wid) => {\n    return new Promise((resolve, reject) => {\n      findNode(node, wid, resolve);\n    });\n  };\n\n  insertReplies = async node => {\n    try {\n      if (isLeaf(node)) {\n        const response = await fetchReplies({ wid: node.data.wid, limit: 10 });\n        const sons = response.replies.map(mapData);\n        node.sons = sons;\n      }\n    } catch (error) {\n      console.error(\"INSERT_REPLIES\", error);\n    }\n  };\n\n  handleClick = (rootIndex, wid) => {\n    if (!wid) {\n      return this.handleClickPopulars(rootIndex);\n    }\n    return this.handleClickPopulars(rootIndex, wid);\n  };\n\n  render() {\n    const { listPopulars } = this.state;\n    return (\n      <>\n        <h1 style={{ fontSize: \"1.5rem\", color: \"#3e3e3e\", marginLeft: \"5%\" }}>\n          Popular Replies\n        </h1>\n        <ul>\n          {listPopulars.map((whisper, idx) => {\n            return (\n              <>\n                <ListItem\n                  key={whisper.data.wid}\n                  me2={whisper.data.me2}\n                  replies={whisper.data.replies}\n                  text={whisper.data.text}\n                  url={whisper.data.url}\n                  // wid={whisper.data.wid}\n                  onClick={this.handleClickPopulars}\n                  rootIndex={idx}\n                  maxValue={whisper.maxValue || whisper.data.replies}\n                />\n                {whisper.sons.length > 0 && (\n                  <ListReplies\n                    indent={1}\n                    replies={whisper.sons}\n                    rootIndex={idx}\n                    handleClickReplies={this.handleClickReplies}\n                  />\n                )}\n              </>\n            );\n          })}\n        </ul>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}